### AVA Authentication API Tests
### Backend URL: http://localhost:8000
### Documentation pour tester tous les endpoints auth

@baseUrl = http://localhost:8000/api/v1

###############################################################################
# 1. SIGNUP - Créer un nouveau compte utilisateur
###############################################################################

### 1.1 Signup avec EMAIL (cas nominal)
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "email": "divine@ava.ai",
  "password": "DivinePower123",
  "name": "Divine Codex"
}

### 1.2 Signup avec PHONE (cas nominal)
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "email": "phone.user@ava.ai",
  "phone": "+33612345678",
  "password": "SecurePass1",
  "name": "Phone User"
}

### 1.3 Signup - Password trop faible (devrait échouer)
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "email": "weak@ava.ai",
  "password": "weak",
  "name": "Weak Password User"
}

### 1.4 Signup - Email invalide (devrait échouer)
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "email": "not-an-email",
  "password": "ValidPass1",
  "name": "Invalid Email"
}

###############################################################################
# 2. LOGIN - Se connecter avec email OU phone
###############################################################################

### 2.1 Login avec EMAIL
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "identifier": "divine@ava.ai",
  "password": "DivinePower123"
}

### 2.2 Login avec PHONE
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "identifier": "+33612345678",
  "password": "SecurePass1"
}

### 2.3 Login - Mauvais password (devrait échouer)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "identifier": "divine@ava.ai",
  "password": "WrongPassword123"
}

### 2.4 Login - User inexistant (devrait échouer)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "identifier": "notfound@ava.ai",
  "password": "AnyPass1"
}

###############################################################################
# 3. PROTECTED ROUTE - Tester avec access token
###############################################################################

### 3.1 Get Current User (utiliser access_token du login)
GET {{baseUrl}}/auth/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
# ⚠️ REMPLACER le token ci-dessus par le access_token reçu lors du login

### 3.2 Get Current User - Token invalide (devrait échouer)
GET {{baseUrl}}/auth/me
Authorization: Bearer invalid_token_here

### 3.3 Get Current User - Sans token (devrait échouer)
GET {{baseUrl}}/auth/me

###############################################################################
# 4. REFRESH TOKEN - Renouveler l'access token
###############################################################################

### 4.1 Refresh Token (cas nominal)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
# ⚠️ REMPLACER par le refresh_token reçu lors du login

### 4.2 Refresh Token - Token invalide (devrait échouer)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "invalid_refresh_token"
}

### 4.3 Refresh Token - Access token utilisé (devrait échouer)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "access_token_instead_of_refresh"
}

###############################################################################
# 5. VERIFICATION ENDPOINTS (à implémenter plus tard)
###############################################################################

### 5.1 Send Email Verification
POST {{baseUrl}}/auth/verify-email/send
Content-Type: application/json

{
  "email": "divine@ava.ai"
}

### 5.2 Verify Email Code
POST {{baseUrl}}/auth/verify-email/confirm
Content-Type: application/json

{
  "email": "divine@ava.ai",
  "code": "123456"
}

### 5.3 Send Phone Verification
POST {{baseUrl}}/auth/verify-phone/send
Content-Type: application/json

{
  "phone": "+33612345678"
}

### 5.4 Verify Phone Code
POST {{baseUrl}}/auth/verify-phone/confirm
Content-Type: application/json

{
  "phone": "+33612345678",
  "code": "123456"
}

###############################################################################
# NOTES D'UTILISATION
###############################################################################
# 
# 1. Installer l'extension VS Code "REST Client" par Huachao Mao
# 2. Cliquer sur "Send Request" au-dessus de chaque requête
# 3. Copier les tokens reçus et les coller dans les requêtes suivantes
# 
# WORKFLOW DE TEST RECOMMANDÉ:
# ✅ Step 1: Tester 1.1 (signup avec email) → Copier access_token
# ✅ Step 2: Tester 3.1 (get /me) avec le token copié
# ✅ Step 3: Tester 2.1 (login) → Vérifier qu'on reçoit les mêmes infos
# ✅ Step 4: Tester 4.1 (refresh) avec refresh_token → Nouveau access_token
# ✅ Step 5: Tester tous les cas d'erreur (1.3, 1.4, 2.3, 2.4, 3.2, 3.3)
# 
# RÉSULTATS ATTENDUS:
# - Signup: 200 OK avec access_token, refresh_token, user object
# - Login: 200 OK avec tokens + user
# - /me: 200 OK avec user details
# - Refresh: 200 OK avec nouveau access_token
# - Erreurs: 400/401/422 avec message d'erreur clair
#
###############################################################################
